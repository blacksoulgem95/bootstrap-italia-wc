name: Update Documentation with JSDelivr Links

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  update-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build
        
      - name: Determine version and source
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag push - use npm version
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
            SOURCE="npm"
            URL="https://cdn.jsdelivr.net/npm/bootstrap-italia-wc@${VERSION}/dist/bootstrap-italia-wc.js"
            URL_MIN="https://cdn.jsdelivr.net/npm/bootstrap-italia-wc@${VERSION}/dist/bootstrap-italia-wc.min.js"
            URL_ESM="https://cdn.jsdelivr.net/npm/bootstrap-italia-wc@${VERSION}/dist/bootstrap-italia-wc.esm.js"
          else
            # Master branch - use latest branch
            VERSION="latest"
            SOURCE="github"
            URL="https://cdn.jsdelivr.net/gh/${{ github.repository }}@latest/bootstrap-italia-wc.js"
            URL_MIN="https://cdn.jsdelivr.net/gh/${{ github.repository }}@latest/bootstrap-italia-wc.min.js"
            URL_ESM="https://cdn.jsdelivr.net/gh/${{ github.repository }}@latest/bootstrap-italia-wc.esm.js"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "source=${SOURCE}" >> $GITHUB_OUTPUT
          echo "url=${URL}" >> $GITHUB_OUTPUT
          echo "url_min=${URL_MIN}" >> $GITHUB_OUTPUT
          echo "url_esm=${URL_ESM}" >> $GITHUB_OUTPUT
          
      - name: Update documentation files
        run: |
          # Function to update JS links in HTML files
          update_js_links() {
            local file="$1"
            local new_url="$2"
            local new_url_min="$3"
            local new_url_esm="$4"
            
            echo "Updating $file..."
            
            # Update main JS file
            sed -i "s|src=\"\.\./dist/bootstrap-italia-wc\.js\"|src=\"$new_url\"|g" "$file"
            sed -i "s|src=\"dist/bootstrap-italia-wc\.js\"|src=\"$new_url\"|g" "$file"
            
            # Update minified JS file
            sed -i "s|src=\"\.\./dist/bootstrap-italia-wc\.min\.js\"|src=\"$new_url_min\"|g" "$file"
            sed -i "s|src=\"dist/bootstrap-italia-wc\.min\.js\"|src=\"$new_url_min\"|g" "$file"
            
            # Update ESM JS file
            sed -i "s|src=\"\.\./dist/bootstrap-italia-wc\.esm\.js\"|src=\"$new_url_esm\"|g" "$file"
            sed -i "s|src=\"dist/bootstrap-italia-wc\.esm\.js\"|src=\"$new_url_esm\"|g" "$file"
            
            # Add version info comment
            sed -i "1i<!-- Updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC") - Version: ${{ steps.version.outputs.version }} - Source: ${{ steps.version.outputs.source }} -->" "$file"
          }
          
          # Update all HTML files in examples directory
          find examples -name "*.html" -type f | while read file; do
            update_js_links "$file" "${{ steps.version.outputs.url }}" "${{ steps.version.outputs.url_min }}" "${{ steps.version.outputs.url_esm }}"
          done
          
          # Update all HTML files in docs directory
          find docs -name "*.html" -type f | while read file; do
            update_js_links "$file" "${{ steps.version.outputs.url }}" "${{ steps.version.outputs.url_min }}" "${{ steps.version.outputs.url_esm }}"
          done
          
          # Update README.md with version info
          if [[ "${{ steps.version.outputs.source }}" == "npm" ]]; then
            sed -i "s|npm install bootstrap-italia-wc|npm install bootstrap-italia-wc@${{ steps.version.outputs.version }}|g" README.md
            sed -i "s|https://cdn\.jsdelivr\.net/npm/bootstrap-italia-wc@[^/]*/|https://cdn.jsdelivr.net/npm/bootstrap-italia-wc@${{ steps.version.outputs.version }}/|g" README.md
          fi
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Commit and push changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation with ${{ steps.version.outputs.source }} links (v${{ steps.version.outputs.version }})"
            git push origin ${{ github.ref_name }}
          fi
          
      - name: Update GitHub Pages
        if: github.ref == 'refs/heads/master'
        run: |
          # Trigger GitHub Pages deployment
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pages/builds